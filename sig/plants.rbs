# Plants :)
module Plants
  extend Plants::Resources
  VERSION: String

  # _@param_ `new_value`
  def self.token=: (String new_value) -> void

  def self.config: () -> Plants::Config

  def self.client: () -> Plants::Client

  # GET /subkingdoms
  # 
  # _@param_ `params`
  def self.list_subkingdoms: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

  # _@param_ `kingdom`
  def self.find_subkingdom: (String kingdom) -> ::HTTP::Response

  # GET /species
  # 
  # _@param_ `params`
  def self.list_species: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

  # _@param_ `species`
  def self.find_species: (String species) -> ::HTTP::Response

  # _@param_ `species`
  # 
  # _@return_ — s
  def self.search_for_species: (String species) -> ::HTTP::Response

  # GET /kingdoms
  # 
  # _@param_ `params`
  def self.list_kingdoms: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

  # _@param_ `kingdom`
  def self.find_kingdom: (String kingdom) -> ::HTTP::Response

  # GET /genus
  # 
  # _@param_ `params`
  def self.list_genera: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

  # _@param_ `genus`
  def self.find_genus: (String genus) -> ::HTTP::Response

  # GET /families
  # 
  # _@param_ `params`
  def self.list_families: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

  # _@param_ `family`
  def self.find_family: (String family) -> ::HTTP::Response

  # GET /divisions
  # 
  # _@param_ `params`
  def self.list_divisions: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

  # _@param_ `division`
  def self.find_division: (String division) -> ::HTTP::Response

  # GET /division_orders
  # 
  # _@param_ `params`
  def self.list_division_orders: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

  # _@param_ `division_order`
  def self.find_division_order: (String division_order) -> ::HTTP::Response

  # GET /division_classes
  # 
  # _@param_ `params`
  def self.list_division_classes: (::Hash[untyped, untyped] params) -> ::HTTP::Response

  # _@param_ `division_class`
  def self.find_division_class: (String division_class) -> ::HTTP::Response

  # GET /distributions
  # 
  # _@param_ `params`
  def self.list_distributions: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

  # _@param_ `distribution`
  def self.find_distribution: (String distribution) -> ::HTTP::Response

  # GET /corrections
  # 
  # _@param_ `params`
  def self.list_corrections: (::Hash[untyped, untyped] params) -> ::HTTP::Response

  # _@param_ `correction`
  def self.find_correction: (String correction) -> ::HTTP::Response

  # HTTP Client
  # 
  # @!attribute [r] config
  #   @return [Plants::Config]
  class Client
    URL: String

    # _@param_ `config`
    def initialize: (?Plants::Config config) -> void

    # _@param_ `resource`
    # 
    # _@param_ `params`
    def get: (String resource, ?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

    def http: () -> ::HTTP::Client

    attr_reader config: Plants::Config
  end

  # Configuration class
  # 
  # @!attribute token
  #   @return [String]
  class Config
    def initialize: () -> void

    attr_accessor token: String
  end

  # Resources 'container' module
  module Resources
    include Plants::Resources::Corrections
    include Plants::Resources::Distributions
    include Plants::Resources::DivisionClasses
    include Plants::Resources::DivisionOrders
    include Plants::Resources::Divisions
    include Plants::Resources::Families
    include Plants::Resources::Genus
    include Plants::Resources::Kingdoms
    include Plants
    include Plants::Resources::Species
    include Plants::Resources::Subkingdoms

    # GET /subkingdoms
    # 
    # _@param_ `params`
    def list_subkingdoms: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

    # _@param_ `kingdom`
    def find_subkingdom: (String kingdom) -> ::HTTP::Response

    # GET /species
    # 
    # _@param_ `params`
    def list_species: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

    # _@param_ `species`
    def find_species: (String species) -> ::HTTP::Response

    # _@param_ `species`
    # 
    # _@return_ — s
    def search_for_species: (String species) -> ::HTTP::Response

    # GET /kingdoms
    # 
    # _@param_ `params`
    def list_kingdoms: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

    # _@param_ `kingdom`
    def find_kingdom: (String kingdom) -> ::HTTP::Response

    # GET /genus
    # 
    # _@param_ `params`
    def list_genera: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

    # _@param_ `genus`
    def find_genus: (String genus) -> ::HTTP::Response

    # GET /families
    # 
    # _@param_ `params`
    def list_families: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

    # _@param_ `family`
    def find_family: (String family) -> ::HTTP::Response

    # GET /divisions
    # 
    # _@param_ `params`
    def list_divisions: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

    # _@param_ `division`
    def find_division: (String division) -> ::HTTP::Response

    # GET /division_orders
    # 
    # _@param_ `params`
    def list_division_orders: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

    # _@param_ `division_order`
    def find_division_order: (String division_order) -> ::HTTP::Response

    # GET /division_classes
    # 
    # _@param_ `params`
    def list_division_classes: (::Hash[untyped, untyped] params) -> ::HTTP::Response

    # _@param_ `division_class`
    def find_division_class: (String division_class) -> ::HTTP::Response

    # GET /distributions
    # 
    # _@param_ `params`
    def list_distributions: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

    # _@param_ `distribution`
    def find_distribution: (String distribution) -> ::HTTP::Response

    # GET /corrections
    # 
    # _@param_ `params`
    def list_corrections: (::Hash[untyped, untyped] params) -> ::HTTP::Response

    # _@param_ `correction`
    def find_correction: (String correction) -> ::HTTP::Response

    # Genera module
    # @see https://docs.trefle.io/reference#tag/Genus
    module Genus
      # GET /genus
      # 
      # _@param_ `params`
      def list_genera: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

      # _@param_ `genus`
      def find_genus: (String genus) -> ::HTTP::Response
    end

    # Plants resource
    # @see https://docs.trefle.io/reference#tag/Plants
    module Plants
      # GET /plants
      # 
      # _@param_ `params`
      def list_plants: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

      # GET /plants/{plant}
      # 
      # _@param_ `plant`
      def find_plant: (String plant) -> ::HTTP::Response

      # _@param_ `plant`
      # 
      # _@param_ `params`
      def search_for_plant: (String plant, ?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

      # _@param_ `genus`
      # 
      # _@param_ `params`
      def list_plants_for_genus: (String genus, ?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

      # _@param_ `zone`
      # 
      # _@param_ `params`
      def list_plants_for_distribution_zone: (String zone, ?params: ::Hash[untyped, untyped]) -> ::HTTP::Response
    end

    # Species module
    # @see https://docs.trefle.io/reference#tag/Species
    module Species
      # GET /species
      # 
      # _@param_ `params`
      def list_species: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

      # _@param_ `species`
      def find_species: (String species) -> ::HTTP::Response

      # _@param_ `species`
      # 
      # _@return_ — s
      def search_for_species: (String species) -> ::HTTP::Response
    end

    # Families module
    # @see https://docs.trefle.io/reference#tag/Families
    module Families
      # GET /families
      # 
      # _@param_ `params`
      def list_families: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

      # _@param_ `family`
      def find_family: (String family) -> ::HTTP::Response
    end

    # Kingdoms module
    # @see https://docs.trefle.io/reference#tag/Kingdoms
    module Kingdoms
      # GET /kingdoms
      # 
      # _@param_ `params`
      def list_kingdoms: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

      # _@param_ `kingdom`
      def find_kingdom: (String kingdom) -> ::HTTP::Response
    end

    # Divisions module
    # @see https://docs.trefle.io/reference#tag/Divisions
    module Divisions
      # GET /divisions
      # 
      # _@param_ `params`
      def list_divisions: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

      # _@param_ `division`
      def find_division: (String division) -> ::HTTP::Response
    end

    # Corrections module
    # @see https://docs.trefle.io/reference#tag/Corrections
    module Corrections
      # GET /corrections
      # 
      # _@param_ `params`
      def list_corrections: (::Hash[untyped, untyped] params) -> ::HTTP::Response

      # _@param_ `correction`
      def find_correction: (String correction) -> ::HTTP::Response
    end

    # Subkingdoms module
    # @see https://docs.trefle.io/reference#tag/Subkingdoms
    module Subkingdoms
      # GET /subkingdoms
      # 
      # _@param_ `params`
      def list_subkingdoms: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

      # _@param_ `kingdom`
      def find_subkingdom: (String kingdom) -> ::HTTP::Response
    end

    # Distributions module
    # @see https://docs.trefle.io/reference#tag/Distributions
    module Distributions
      # GET /distributions
      # 
      # _@param_ `params`
      def list_distributions: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

      # _@param_ `distribution`
      def find_distribution: (String distribution) -> ::HTTP::Response
    end

    # Division orders module
    # @see https://docs.trefle.io/reference#tag/DivisionOrders
    module DivisionOrders
      # GET /division_orders
      # 
      # _@param_ `params`
      def list_division_orders: (?params: ::Hash[untyped, untyped]) -> ::HTTP::Response

      # _@param_ `division_order`
      def find_division_order: (String division_order) -> ::HTTP::Response
    end

    # Division classes module
    # @see https://docs.trefle.io/reference#tag/DivisionClasses
    module DivisionClasses
      # GET /division_classes
      # 
      # _@param_ `params`
      def list_division_classes: (::Hash[untyped, untyped] params) -> ::HTTP::Response

      # _@param_ `division_class`
      def find_division_class: (String division_class) -> ::HTTP::Response
    end
  end
end